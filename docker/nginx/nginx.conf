user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;
    server_tokens off;

    # Define rate limit for APIs
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Define upstreams for each microservice
    upstream auth_service {
         server auth:3001;
    }

    upstream oauth_service {
        server oauth:3002;
    }

    upstream files_service {
        server files:3003;
    }

    server {
        listen 80;  # Default to port 80 if NGINX_PORT is not set

        server_name localhost gateway;

        # Security headers
        add_header X-Frame-Options "DENY";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Dynamic handling for /api/ paths in any microservice inside /services/
        location /api/* {
            limit_req zone=api_limit burst=10 nodelay;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";

            if ($request_method = OPTIONS) {
                return 204;
            }

            # Dynamic proxy pass to respective upstreams based on service name
            proxy_pass http://$1_service;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Specific routes for each microservice
        location /oauth/ {
            proxy_pass http://oauth_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /files/ {
            proxy_pass http://files_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth/ {
            proxy_pass http://auth_service/;  
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handling static files for each microservice dynamically
        location ~ ^/(.+?)/_next/static/ {
            alias /services/$1/.next/static/;  
            access_log off;
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }

        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
    }
}