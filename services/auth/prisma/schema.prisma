generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String      @id @default(uuid())
    name          String?
    email         String      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    onboarding    Onboarding?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model MagicLink {
    id         String    @id @default(uuid())
    email      String    @unique
    token      String    @unique
    expiresAt  DateTime
    used       Boolean   @default(false)
    otp        String? // Stores the generated 6-digit OTP
    otpExpires DateTime? // Expiry time for OTP

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id              String   @id @default(uuid())
    userId          String
    sessionToken    String   @unique
    refreshToken    String?  @unique
    deviceId        String?
    deviceName      String?
    deviceType      String?
    browser         String?
    os              String?
    appVersion      String?
    location        String?
    ipAddress       String?
    isCurrentDevice Boolean  @default(false)
    lastActive      DateTime @default(now())
    isActive        Boolean  @default(true)
    expires         DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Onboarding {
    id         String      @id @default(uuid())
    userId     String      @unique
    userType   UserType
    individual Individual?
    company    Company?
    completed  Boolean     @default(false)
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserType {
    INDIVIDUAL
    COMPANY
}

model Individual {
    id           String     @id @default(uuid())
    onboardingId String     @unique
    mobile       String?
    role         String?
    onboarding   Onboarding @relation(fields: [onboardingId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Company {
    id           String       @id @default(uuid())
    onboardingId String       @unique
    name         String
    description  String?
    email        String
    mobile       String?
    website      String?
    teamMembers  TeamMember[]
    onboarding   Onboarding   @relation(fields: [onboardingId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TeamMember {
    id        String  @id @default(uuid())
    companyId String
    name      String
    role      String
    email     String?
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
